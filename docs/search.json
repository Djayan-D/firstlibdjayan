[{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Générer un rapport d'analyses","text":"Dans cette vignette, nous allons explorer l’utilisation des fonctions suivantes : summary.commune() : Cette fonction génère un résumé des informations pour une commune donnée. summary.departement() : Cette fonction génère un résumé des informations pour un département donné. generer_rapport() : Cette fonction génère un rapport au format PDF en utilisant un fichier Quarto, avec des paramètres pour la commune et le département. Nous allons démontrer ces fonctions en utilisant des exemples concrets.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"résumé-des-informations-dune-commune","dir":"Articles","previous_headings":"","what":"1. Résumé des informations d’une commune","title":"Générer un rapport d'analyses","text":"La fonction summary.commune() prend un objet de type commune (un data.frame contenant les informations des élus d’une commune) et génère un résumé de ces informations, incluant le nom de la commune, le nombre d’élus, la distribution des âges des élus et l’élu le plus âgé. Le résumé pour cette commune peut inclure des informations telles que : Nom de la commune : Faverelles Nombre d’élus : 5 Distribution des âges des élus : 45, 56, 34, 70, 62 L’élu le plus âgé : Durand (70 ans)","code":"# Exemple d'utilisation de summary.commune # Supposons que 'commune_data' est un data.frame représentant une commune  # Création d'un exemple fictif de données pour la commune commune_data <- data.frame(   Code.du.département = rep(45, 10),   Libellé.du.département = rep(\"Loiret\", 10),   Code.de.la.commune = rep(45141, 10),   Libellé.de.la.commune = rep(\"Faverelles\", 10),   Nom.de.l.élu = c(\"CHAUX\", \"COLLE\", \"DAUBRY\", \"EUGENE\", \"GOIRAND\",                    \"LECUYER\", \"LETEUR\", \"MARET\", \"MARIE-LOUISE\", \"PIERROT\"),   Prénom.de.l.élu = c(\"Annie\", \"Sylvain\", \"Christiane\", \"Jacques\", \"Dominique\",                       \"Frédérique\", \"Manuel\", \"Frédérick\", \"Joëlle\", \"Pascal\"),   Date.de.naissance = as.Date(c(\"1954-09-30\", \"1982-10-22\", \"1952-11-26\", \"1951-07-14\",                                  \"1962-04-20\", \"1963-03-25\", \"1965-12-15\", \"1975-11-08\",                                  \"1964-08-04\", \"1966-04-01\")),   Age = c(75, 37, 71, 74, 23, 48, 12, 52, 85, 38),   Code.de.la.catégorie.socio.professionnelle = c(18, 3, 7, 5, 3, 4, 2, 1, 13, 11),   Libellé.de.la.fonction = c(NA, NA, \"2ème adjoint au Maire\", \"Maire\", NA, NA, \"1er adjoint au Maire\", NA, NA, NA),   Date.de.mise.en.place = as.Date(c(\"2020-05-18\", \"2020-05-18\", \"2020-05-23\", \"2020-05-23\", \"2020-05-18\",                                     \"2020-05-18\", \"2020-05-23\", \"2020-05-18\", \"2020-05-18\", \"2020-05-18\")),   Code.pays = rep(\"FR\", 10),   stringsAsFactors = FALSE )   # Attribuer la classe commune  commune_data <- creer_commune(commune_data)   # Résumé de la commune  summary(commune_data) #> $nom_commune #> [1] \"Faverelles\" #>  #> $nombre_elus #> [1] 10 #>  #> $distribution_ages_elus #> $distribution_ages_elus$Q0 #> [1] 42 #>  #> $distribution_ages_elus$Q25 #> [1] 58.25 #>  #> $distribution_ages_elus$Q50 #> [1] 60.5 #>  #> $distribution_ages_elus$Q75 #> [1] 68 #>  #> $distribution_ages_elus$Q100 #> [1] 73 #>  #>  #> $elu_plus_age #> $elu_plus_age$nom #> [1] \"EUGENE\" #>  #> $elu_plus_age$prénom #> [1] \"Jacques\" #>  #> $elu_plus_age$age #> [1] 73"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"résumé-des-informations-dun-département","dir":"Articles","previous_headings":"","what":"2. Résumé des informations d’un département","title":"Générer un rapport d'analyses","text":"La fonction summary.departement() fonctionne de manière similaire mais pour un département entier. Elle prend un objet de type departement (un data.frame contenant les informations des communes et des élus d’un département) et retourne des statistiques globales sur le département, telles que le nombre de communes, le nombre d’élus, et la distribution des âges des élus. Le résumé pour ce département pourrait inclure des informations comme : Nom du département : Loire-Atlantique Nombre de communes : 3 Nombre d’élus : 5 Distribution des âges des élus : 45, 56, 34, 70, 62 L’élu le plus âgé : Durand (70 ans) La commune avec la moyenne d’âge la plus basse : Nantes La commune avec la moyenne d’âge la plus élevée : Saint-Nazaire","code":"# Exemple d'utilisation de summary.departement # Supposons que 'departement_data' est un data.frame représentant un département  # Création d'un exemple fictif de données pour le département departement_data <- data.frame(   Code.du.département = rep(45, 10),   Libellé.du.département = rep(\"Loiret\", 10),   Code.de.la.commune = rep(45141, 10),   Libellé.de.la.commune = rep(\"Faverelles\", 10),   Nom.de.l.élu = c(\"CHAUX\", \"COLLE\", \"DAUBRY\", \"EUGENE\", \"GOIRAND\",                    \"LECUYER\", \"LETEUR\", \"MARET\", \"MARIE-LOUISE\", \"PIERROT\"),   Prénom.de.l.élu = c(\"Annie\", \"Sylvain\", \"Christiane\", \"Jacques\", \"Dominique\",                       \"Frédérique\", \"Manuel\", \"Frédérick\", \"Joëlle\", \"Pascal\"),   Date.de.naissance = as.Date(c(\"1954-09-30\", \"1982-10-22\", \"1952-11-26\", \"1951-07-14\",                                  \"1962-04-20\", \"1963-03-25\", \"1965-12-15\", \"1975-11-08\",                                  \"1964-08-04\", \"1966-04-01\")),   Age = c(75, 37, 71, 74, 23, 48, 12, 52, 85, 38),   Code.de.la.catégorie.socio.professionnelle = c(18, 3, 7, 5, 3, 4, 2, 1, 13, 11),   Libellé.de.la.fonction = c(NA, NA, \"2ème adjoint au Maire\", \"Maire\", NA, NA, \"1er adjoint au Maire\", NA, NA, NA),   Date.de.mise.en.place = as.Date(c(\"2020-05-18\", \"2020-05-18\", \"2020-05-23\", \"2020-05-23\", \"2020-05-18\",                                     \"2020-05-18\", \"2020-05-23\", \"2020-05-18\", \"2020-05-18\", \"2020-05-18\")),   Code.pays = rep(\"FR\", 10),   stringsAsFactors = FALSE )   # Attribuer la classe département  departement_data <- creer_departement(departement_data)   # Résumé du département summary(departement_data) #> $nom_departement #> [1] \"Loiret\" #>  #> $nombre_communes #> [1] 1 #>  #> $nombre_elus #> [1] 10 #>  #> $distribution_age_elus #> $distribution_age_elus$Q0 #> [1] 42 #>  #> $distribution_age_elus$Q25 #> [1] 58.25 #>  #> $distribution_age_elus$Q50 #> [1] 60.5 #>  #> $distribution_age_elus$Q75 #> [1] 68 #>  #> $distribution_age_elus$Q100 #> [1] 73 #>  #>  #> $elu_plus_age #> $elu_plus_age$nom #> [1] \"EUGENE\" #>  #> $elu_plus_age$age #> [1] 73 #>  #>  #> $elu_plus_jeune #> $elu_plus_jeune$nom #> [1] \"COLLE\" #>  #> $elu_plus_jeune$age #> [1] 42 #>  #>  #> $commune_plus_jeune #> $commune_plus_jeune$nom #> [1] \"Faverelles\" #>  #> $commune_plus_jeune$distribution_ages #> $commune_plus_jeune$distribution_ages$Q0 #> [1] 42 #>  #> $commune_plus_jeune$distribution_ages$Q25 #> [1] 58.25 #>  #> $commune_plus_jeune$distribution_ages$Q50 #> [1] 60.5 #>  #> $commune_plus_jeune$distribution_ages$Q75 #> [1] 68 #>  #> $commune_plus_jeune$distribution_ages$Q100 #> [1] 73 #>  #>  #>  #> $commune_plus_agee #> $commune_plus_agee$nom #> [1] \"Faverelles\" #>  #> $commune_plus_agee$distribution_ages #> $commune_plus_agee$distribution_ages$Q0 #> [1] 42 #>  #> $commune_plus_agee$distribution_ages$Q25 #> [1] 58.25 #>  #> $commune_plus_agee$distribution_ages$Q50 #> [1] 60.5 #>  #> $commune_plus_agee$distribution_ages$Q75 #> [1] 68 #>  #> $commune_plus_agee$distribution_ages$Q100 #> [1] 73"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"générer-un-rapport-danalyses","dir":"Articles","previous_headings":"","what":"3. Générer un rapport d’analyses","title":"Générer un rapport d'analyses","text":"La fonction generer_rapport() génère un rapport au format PDF en utilisant un fichier Quarto .qmd. Elle prend en entrée les codes de la commune et du département, et génère un fichier PDF avec les informations correspondantes. Cette fonction crée un fichier PDF appelé rapport_nantes_et_loire_atlantique.html qui inclut des analyses sur la commune de Nantes et le département de Loire-Atlantique. Les données peuvent être ajustées pour correspondre à des valeurs réelles provenant de vos jeux de données.","code":"# Exemple d'utilisation de generer_rapport # Supposons que nous voulons générer un rapport pour Nantes et Loire-Atlantique  generer_rapport(commune = 44109,                  departement = 44,                  output = \"rapport_nantes_et_loire_atlantique.html\") #>  #>  #> processing file: rapport.qmd #>   |                                                            |                                                    |   0%  |                                                            |...                                                 |   7%                    |                                                            |.......                                             |  13% [unnamed-chunk-1]  |                                                            |..........                                          |  20%                    |                                                            |..............                                      |  27% [unnamed-chunk-2]  |                                                            |.................                                   |  33%                    |                                                            |.....................                               |  40% [unnamed-chunk-3]  |                                                            |........................                            |  47%                    |                                                            |............................                        |  53% [unnamed-chunk-4]  |                                                            |...............................                     |  60%                    |                                                            |...................................                 |  67% [unnamed-chunk-5]  |                                                            |......................................              |  73%                    |                                                            |..........................................          |  80% [unnamed-chunk-6]  |                                                            |.............................................       |  87%                    |                                                            |.................................................   |  93% [unnamed-chunk-7]  |                                                            |....................................................| 100%                                                                                                                               #> output file: rapport.knit.md #>  #> pandoc --output ..\\..\\..\\..\\..\\..\\Desktop\\firstlibdjayan\\vignettes\\rapport_nantes_et_loire_atlantique.html #>   to: html #>   standalone: true #>   section-divs: true #>   html-math-method: mathjax #>   wrap: none #>   default-image-extension: png #>    #> metadata #>   document-css: false #>   link-citations: true #>   date-format: long #>   lang: en #>   title: Rapport #>   author: Djayan DAËRON #>    #> Output created: ..\\..\\..\\..\\..\\..\\Desktop\\firstlibdjayan\\vignettes\\rapport_nantes_et_loire_atlantique.html #>  #>  #> Le rapport a été généré avec succès."},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Générer un rapport d'analyses","text":"Nous avons montré comment utiliser les fonctions summary.commune(), summary.departement(), et generer_rapport() pour générer des rapports d’analyses détaillés. Ces fonctions peuvent être adaptées à d’autres communes et départements pour créer des rapports personnalisés. N’hésitez pas à adapter ces fonctions en fonction de vos propres données pour générer des rapports complets et personnalisés.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/rapport_nantes_et_loire_atlantique.html","id":null,"dir":"Articles","previous_headings":"","what":"Chargement des packages","title":null,"text":"","code":"library(dplyr) Warning: package 'dplyr' was built under R version 4.3.3 Attaching package: 'dplyr' The following objects are masked from 'package:stats':      filter, lag The following objects are masked from 'package:base':      intersect, setdiff, setequal, union"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/rapport_nantes_et_loire_atlantique.html","id":null,"dir":"Articles","previous_headings":"","what":"Installation et chargement de la bibliothèque","title":null,"text":"","code":"remotes::install_github(\"Djayan-D/firstlibdjayan\") Using GitHub PAT from the git credential store. Skipping install of 'firstlibdjayan' from a github remote, the SHA1 (e39cbca4) has not changed since last install.   Use `force = TRUE` to force installation library(firstlibdjayan)"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/rapport_nantes_et_loire_atlantique.html","id":null,"dir":"Articles","previous_headings":"","what":"Chargement des données","title":null,"text":"","code":"data <- elus_sample"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/rapport_nantes_et_loire_atlantique.html","id":null,"dir":"Articles","previous_headings":"","what":"Conversion du type de données","title":null,"text":"","code":"data$Date.de.naissance <- as.Date(data$Date.de.naissance)"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/rapport_nantes_et_loire_atlantique.html","id":null,"dir":"Articles","previous_headings":"","what":"Filtrage des données par commune et département","title":null,"text":"","code":"df_commune <- data |>    filter(Code.de.la.commune == params$code_commune)  df_departement <- data |>    filter(Code.du.département == params$code_departement)"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/rapport_nantes_et_loire_atlantique.html","id":null,"dir":"Articles","previous_headings":"","what":"Création des jeux de données pour la commune et le département","title":null,"text":"","code":"df_commune <- creer_commune(df_commune) df_departement <- creer_departement(df_departement)"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/rapport_nantes_et_loire_atlantique.html","id":null,"dir":"Articles","previous_headings":"","what":"Analyse des données","title":null,"text":"","code":"summary(df_commune) $nom_commune [1] \"Nantes\"  $nombre_elus [1] 66  $distribution_ages_elus $distribution_ages_elus$Q0 [1] 1993  $distribution_ages_elus$Q25 [1] 2002  $distribution_ages_elus$Q50 [1] 2011  $distribution_ages_elus$Q75 [1] 2017  $distribution_ages_elus$Q100 [1] 2023   $elu_plus_age $elu_plus_age$nom [1] \"BOULÉ\"  $elu_plus_age$prénom [1] \"Aurélien\"  $elu_plus_age$age [1] 2023 plot(df_commune) summary(df_departement) $nom_departement [1] \"Loire-Atlantique\"  $nombre_communes [1] 207  $nombre_elus [1] 4781  $distribution_age_elus $distribution_age_elus$Q0 [1] 1993  $distribution_age_elus$Q25 [1] 2001  $distribution_age_elus$Q50 [1] 2008  $distribution_age_elus$Q75 [1] 2016  $distribution_age_elus$Q100 [1] 2024   $elu_plus_age $elu_plus_age$nom [1] \"MEIGNEN\"  $elu_plus_age$age [1] 2024   $elu_plus_jeune $elu_plus_jeune$nom [1] \"DUCROQUET\"  $elu_plus_jeune$age [1] 1993   $commune_plus_jeune $commune_plus_jeune$nom [1] \"Le Bignon\"  $commune_plus_jeune$distribution_ages $commune_plus_jeune$distribution_ages$Q0 [1] 1993  $commune_plus_jeune$distribution_ages$Q25 [1] 1996  $commune_plus_jeune$distribution_ages$Q50 [1] 1999  $commune_plus_jeune$distribution_ages$Q75 [1] 2008.5  $commune_plus_jeune$distribution_ages$Q100 [1] 2023    $commune_plus_agee $commune_plus_agee$nom [1] \"Lavau-Sur-Loire\"  $commune_plus_agee$distribution_ages $commune_plus_agee$distribution_ages$Q0 [1] 1994  $commune_plus_agee$distribution_ages$Q25 [1] 2012.25  $commune_plus_agee$distribution_ages$Q50 [1] 2018  $commune_plus_agee$distribution_ages$Q75 [1] 2020.25  $commune_plus_agee$distribution_ages$Q100 [1] 2022 plot(df_departement)"},{"path":"https://djayan-d.github.io/firstlibdjayan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Djayan Daëron. Author, maintainer.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Daëron D (2025). firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales. R package version 0.1.0, https://djayan-d.github.io/firstlibdjayan/, https://github.com/Djayan-D/firstlibdjayan.","code":"@Manual{,   title = {firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales},   author = {Djayan Daëron},   year = {2025},   note = {R package version 0.1.0, https://djayan-d.github.io/firstlibdjayan/},   url = {https://github.com/Djayan-D/firstlibdjayan}, }"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculer la distribution des âges des élus — calcul_distribution_age","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"Cette fonction permet de calculer la distribution des âges des élus à partir de leur date de naissance. Elle retourne les quantiles (0","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"","code":"calcul_distribution_age(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"df Un `data.frame` contenant les données des élus, avec la colonne `Date.de.naissance` utilisée pour calculer l'âge de chaque élu.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"Une liste contenant les quantiles des âges des élus : - `Q0` : 0 - `Q25` : 25 - `Q50` : 50 - `Q75` : 75 - `Q100` : 100","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"Cette fonction permet de compter le nombre de lignes dans un `data.frame` où la fonction de l'élu contient le mot \"adjoint\". Elle utilise la fonction `validate_schema` pour vérifier que le `data.frame` respecte la structure minimale.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"","code":"compter_nombre_d_adjoints(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"df Un `data.frame` contenant les données des élus. Il doit inclure la colonne `Libellé.de.la.fonction` qui sera utilisée pour rechercher le terme \"adjoint\".","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"Un entier représentant le nombre d'adjoints dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"Cette fonction permet de compter le nombre d'élus uniques dans un `data.frame` en fonction de leur nom, prénom et date de naissance. Elle élimine les doublons pour ne compter qu'une seule fois chaque élu, même s'il apparaît plusieurs fois dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"","code":"compter_nombre_d_elus(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"df Un `data.frame` contenant les données des élus, avec les colonnes `Nom.de.l.élu`, `Prénom.de.l.élu` et `Date.de.naissance` utilisées pour déterminer l'unicité de chaque élu.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"Un entier représentant le nombre d'élus uniques dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Créer un objet de classe ","title":"Créer un objet de classe ","text":"Cette fonction permet de vérifier si le `data.frame` contient les données d'une seule commune. Si le `data.frame` contient plusieurs communes, la fonction arrête l'exécution avec un message d'erreur. Si une seule commune est présente, elle ajoute la classe \"commune\" au `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Créer un objet de classe ","text":"","code":"creer_commune(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Créer un objet de classe ","text":"df Un `data.frame` contenant les données des communes, avec la colonne `Code.de.la.commune` utilisée pour vérifier si plusieurs communes sont présentes dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Créer un objet de classe ","text":"Un `data.frame` auquel la classe \"commune\" est ajoutée s'il contient une seule commune.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Créer un objet de classe ","title":"Créer un objet de classe ","text":"Cette fonction permet de vérifier si le `data.frame` contient les données d'un seul département. Si le `data.frame` contient plusieurs départements, la fonction arrête l'exécution avec un message d'erreur. Si un seul département est présent, elle ajoute la classe \"departement\" au `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Créer un objet de classe ","text":"","code":"creer_departement(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Créer un objet de classe ","text":"df Un `data.frame` contenant les données des départements, avec la colonne `Code.du.département` utilisée pour vérifier si plusieurs départements sont présents dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Créer un objet de classe ","text":"Un `data.frame` auquel la classe \"departement\" est ajoutée s'il contient un seul département.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Données des élus — elus_sample","title":"Données des élus — elus_sample","text":"Un jeu de données contenant des informations sur les élus des départements Loire-Atlantique, Gers, ainsi que de la commune de Faverelles dans le Loiret.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Données des élus — elus_sample","text":"","code":"elus_sample"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Données des élus — elus_sample","text":"## `elus_sample` Un data frame avec 9 752 lignes et 16 colonnes : Code.du.département Code unique identifiant le département (ex : 44 pour Loire-Atlantique, 32 pour Gers) Libellé.du.département Nom du département (ex : \"Loire-Atlantique\", \"Gers\", ou \"Loiret\") Code.de.la.collectivité.à.statut.particulier Code identifiant une collectivité ayant un statut particulier Libellé.de.la.collectivité.à.statut.particulier Nom de la collectivité à statut particulier Code.de.la.commune Code unique identifiant la commune (ex : 44000 pour Nantes, 32000 pour Auch, ou code de Faverelles dans le Loiret) Libellé.de.la.commune Nom de la commune (ex : \"Nantes\", \"Auch\", ou \"Faverelles\") Nom.de.l.élu Nom de l'élu Prénom.de.l.élu Prénom de l'élu Code.sexe Code indiquant le sexe de l'élu (ex : M pour masculin, F pour féminin) Date.de.naissance Date de naissance de l'élu Code.de.la.catégorie.socio.professionnelle Code de la catégorie socio-professionnelle de l'élu Libellé.de.la.catégorie.socio.professionnelle Libellé de la catégorie socio-professionnelle de l'élu Date.de.début.du.mandat Date de début du mandat de l'élu Libellé.de.la.fonction Fonction exercée par l'élu (ex : maire, conseiller municipal) Date.de.début.de.la.fonction Date de début de la fonction de l'élu Code.nationalité Code de la nationalité de l'élu","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Données des élus — elus_sample","text":"<URL ou source de vos données>","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":null,"dir":"Reference","previous_headings":"","what":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"Cette fonction génère un rapport au format PDF à partir d'un fichier Quarto (.qmd) en utilisant les paramètres de la commune et du département fournis.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"","code":"generer_rapport(commune, departement, output)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"commune Le code (ex : INSEE) associé à la commune pour laquelle le rapport sera généré. departement Le code (ex : INSEE) associé au département pour lequel le rapport sera généré. output Un caractère spécifiant le chemin du fichier de sortie (par exemple, \"rapport_nantes.pdf\").","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"Aucun. La fonction génère un fichier de rapport au format spécifié (par défaut PDF).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"","code":"generer_rapport(44109, 44, \"rapport_Nantes_et_Loire_Atlantique.pdf\") #>   #>   #> processing file: rapport.qmd  #> 1/15                    #> 2/15 [unnamed-chunk-1]  #> 3/15                    #> 4/15 [unnamed-chunk-2]  #> trying URL 'https://cloud.r-project.org/bin/windows/contrib/4.3/xfun_0.51.zip'  #> Content type 'application/zip' length 585825 bytes (572 KB)  #> ==================================================  #> downloaded 572 KB  #>   #> trying URL 'https://cloud.r-project.org/bin/windows/contrib/4.3/jsonlite_1.9.0.zip'  #> Content type 'application/zip' length 1105952 bytes (1.1 MB)  #> ==================================================  #> downloaded 1.1 MB  #>   #> trying URL 'https://cloud.r-project.org/bin/windows/contrib/4.3/ps_1.9.0.zip'  #> Content type 'application/zip' length 652010 bytes (636 KB)  #> ==================================================  #> downloaded 636 KB  #>   #> trying URL 'https://cloud.r-project.org/src/contrib/processx_3.8.6.tar.gz'  #> Content type 'application/x-gzip' length 165190 bytes (161 KB)  #> ==================================================  #> downloaded 161 KB  #>   #> * installing *source* package 'processx' ...  #> ** package 'processx' successfully unpacked and MD5 sums checked  #> ERROR: cannot remove earlier installation, is it in use?  #> * removing 'C:/Users/Djayan/AppData/Local/R/win-library/4.3/processx'  #> * restoring previous 'C:/Users/Djayan/AppData/Local/R/win-library/4.3/processx'  #> Warning in file.copy(lp, dirname(pkgdir), recursive = TRUE, copy.date = TRUE) :  #>   problem copying C:\\Users\\Djayan\\AppData\\Local\\R\\win-library\\4.3\\00LOCK-processx\\processx\\libs\\x64\\processx.dll to C:\\Users\\Djayan\\AppData\\Local\\R\\win-library\\4.3\\processx\\libs\\x64\\processx.dll: Permission denied  #>   #> The downloaded source packages are in  #> \t'C:\\Users\\Djayan\\AppData\\Local\\Temp\\Rtmp0MX2Pt\\downloaded_packages'  #> * installing *source* package 'firstlibdjayan' ...  #> ** using staged installation  #> ** R  #> ** data  #> *** moving datasets to lazyload DB  #> ** inst  #> ** byte-compile and prepare package for lazy loading  #> ** help  #> *** installing help indices  #> ** building package indices  #> ** installing vignettes  #> ** testing if installed package can be loaded from temporary location  #> ** testing if installed package can be loaded from final location  #> ** testing if installed package keeps a record of temporary installation path  #> * DONE (firstlibdjayan)  #> 5/15                    #> 6/15 [unnamed-chunk-3]  #> 7/15                    #> 8/15 [unnamed-chunk-4]  #> 9/15                    #> 10/15 [unnamed-chunk-5]  #> 11/15                    #> 12/15 [unnamed-chunk-6]  #> 13/15                    #> 14/15 [unnamed-chunk-7]  #> 15/15                    #> output file: rapport.knit.md  #>   #> pandoc --output ..\\..\\..\\..\\..\\..\\Desktop\\firstlibdjayan\\docs\\reference\\rapport_Nantes_et_Loire_Atlantique.pdf #>   to: html #>   standalone: true #>   section-divs: true #>   html-math-method: mathjax #>   wrap: none #>   default-image-extension: png #>    #> metadata #>   document-css: false #>   link-citations: true #>   date-format: long #>   lang: en #>   title: Rapport #>   author: Djayan DAËRON #>    #> weasyprint not found. Please select a different --pdf-engine or install weasyprint  #>  #> Error in quarto::quarto_render(input = qmd_path, output_format = \"html\",     output_file = output, execute_params = list(code_commune = commune,         code_departement = departement)): ✖ Error running quarto cli. #> Caused by error: #> ! System command 'quarto.exe' failed"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphique des codes professionnels des élus d'une commune — plot.commune","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"Cette fonction génère un graphique en barres horizontales représentant le nombre d'élus par code professionnel dans une commune. Le graphique affiche les codes professionnels ayant au moins un élu, triés par nombre décroissant d'élus. Un titre et des étiquettes sont ajoutés pour la lisibilité.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"","code":"# S3 method for class 'commune' plot(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"df Un objet de classe `commune` (un `data.frame` contenant les informations des élus de la commune).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"Un objet de type `ggplot` représentant un graphique en barres horizontales, où l'axe des ordonnées correspond aux codes professionnels   et l'axe des abscisses au nombre d'élus. Le graphique inclut également des étiquettes des valeurs et un titre personnalisé.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphique des codes professionnels des élus d'un département — plot.departement","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"Cette fonction génère un graphique en barres horizontales représentant les 10 codes professionnels les plus représentés parmi les élus d'un département. Le graphique affiche les codes professionnels ayant au moins un élu, triés par nombre décroissant d'élus. Le titre du graphique et l'axe des abscisses sont personnalisés en fonction du nom du département et du nombre de communes.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"","code":"# S3 method for class 'departement' plot(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"df Un objet de classe `departement` (un `data.frame` contenant les informations des élus du département).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"Un objet de type `ggplot` représentant un graphique en barres horizontales, où l'axe des ordonnées correspond aux codes professionnels   et l'axe des abscisses au nombre d'élus. Le graphique inclut également des étiquettes des valeurs et un titre personnalisé.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":null,"dir":"Reference","previous_headings":"","what":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"Cette fonction permet de générer un graphique en barres horizontal représentant le nombre d'élus par code professionnel. Elle compte le nombre d'élus par code professionnel, filtre ceux avec zéro élu et affiche les résultats sous forme de graphique.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"","code":"plot_code_professions(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"df Un `data.frame` contenant les données des élus, avec la colonne `Code.de.la.catégorie.socio.professionnelle` utilisée pour déterminer la répartition des élus par code professionnel.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"Un objet `ggplot` représentant un graphique en barres horizontal du nombre d'élus par code professionnel.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Résumé des informations d'une commune — summary.commune","title":"Résumé des informations d'une commune — summary.commune","text":"Cette fonction génère un résumé des informations pour une commune donnée. Elle vérifie que l'objet passé en argument est bien de la classe \"commune\", puis retourne une liste contenant : - Le nom de la commune, - Le nombre d'élus, - La distribution des âges des élus, - L'élu le plus âgé.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Résumé des informations d'une commune — summary.commune","text":"","code":"# S3 method for class 'commune' summary(x)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Résumé des informations d'une commune — summary.commune","text":"x Un objet de classe `commune`, qui est un `data.frame` contenant les données des élus d'une commune.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Résumé des informations d'une commune — summary.commune","text":"Une liste contenant : - `nom_commune` : Le nom de la commune, - `nombre_elus` : Le nombre d'élus dans la commune, - `distribution_ages_elus` : Les quantiles de la distribution des âges des élus, - `elu_plus_age` : Les informations de l'élu le plus âgé.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Résumé des informations d'un département — summary.departement","title":"Résumé des informations d'un département — summary.departement","text":"Cette fonction génère un résumé des informations pour un département donné. Elle retourne une liste contenant des statistiques sur le département, notamment le nombre de communes, le nombre d'élus, la distribution des âges des élus, ainsi que des informations sur les élus les plus âgés et les plus jeunes, ainsi que les communes les plus jeunes et les plus âgées.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Résumé des informations d'un département — summary.departement","text":"","code":"# S3 method for class 'departement' summary(x)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Résumé des informations d'un département — summary.departement","text":"x Un objet de classe `departement` (un `data.frame` contenant les informations des élus et des communes).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Résumé des informations d'un département — summary.departement","text":"Une liste contenant plusieurs éléments : - `nom_departement` : Le nom du département, - `nombre_communes` : Le nombre de communes dans le département, - `nombre_elus` : Le nombre d'élus dans le département, - `distribution_age_elus` : La distribution des âges des élus dans le département, - `elu_plus_age` : Le nom et l'âge de l'élu le plus âgé, - `elu_plus_jeune` : Le nom et l'âge de l'élu le plus jeune, - `commune_plus_jeune` : La commune avec la moyenne d'âge la plus faible, - `commune_plus_agee` : La commune avec la moyenne d'âge la plus élevée.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"Cette fonction permet d'identifier les communes ayant la moyenne d'âge la plus faible et la plus élevée parmi les élus. Elle calcule la moyenne d'âge pour chaque commune, puis retourne une liste contenant les informations suivantes pour les communes avec les âges les plus jeunes et les plus âgés : - Le nom de la commune, - La distribution des âges des élus.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"","code":"trouver_communes_extremes_age(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"df Un `data.frame` contenant les informations des élus, avec la colonne `Date.de.naissance` utilisée pour calculer la moyenne d'âge par commune.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"Une liste contenant deux sous-listes : - `commune_plus_jeune` : La commune avec la moyenne d'âge la plus faible, incluant sa distribution d'âges, - `commune_plus_agee` : La commune avec la moyenne d'âge la plus élevée, incluant sa distribution d'âges.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"Cette fonction permet de trouver l'élu le plus âgé dans un `data.frame`. Elle trie les élus par date de naissance et sélectionne l'élu ayant la date de naissance la plus ancienne. L'âge de l'élu est ensuite calculé en années.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"","code":"trouver_l_elu_le_plus_age(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"df Un `data.frame` contenant les données des élus, avec les colonnes `Nom.de.l.élu`, `Prénom.de.l.élu` et `Date.de.naissance` nécessaires pour déterminer l'élu le plus âgé.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"Une liste contenant les informations suivantes sur l'élu le plus âgé : - `nom` : Le nom de l'élu - `prénom` : Le prénom de l'élu - `age` : L'âge de l'élu en années","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"Cette fonction permet d'extraire les informations de l'élu le plus jeune d'un `data.frame`. L'élu le plus jeune est identifié en fonction de sa date de naissance la plus récente. La fonction retourne un résumé des informations de cet élu, incluant son nom, prénom et son âge calculé en années.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"","code":"trouver_l_elu_le_plus_jeune(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"df Un `data.frame` contenant les informations des élus, avec la colonne `Date.de.naissance` utilisée pour identifier l'élu le plus jeune.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"Une liste contenant : - `nom` : Le nom de l'élu le plus jeune, - `prénom` : Le prénom de l'élu le plus jeune, - `age` : L'âge de l'élu le plus jeune en années.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifier le schéma des données — validate_schema","title":"Vérifier le schéma des données — validate_schema","text":"Cette fonction vérifie si une `data.frame` contient toutes les colonnes nécessaires au bon fonctionnement des fonctions du package. Si certaines colonnes sont manquantes, la fonction retourne un avertissement. L'avertissement est utilisé car toutes les fonctions du package ne nécessitent pas toutes les colonnes. Cela permet de continuer l'exécution des fonctions, même en cas de colonnes manquantes.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifier le schéma des données — validate_schema","text":"","code":"validate_schema(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifier le schéma des données — validate_schema","text":"df La `data.frame` à vérifier.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifier le schéma des données — validate_schema","text":"NULL Si le schéma est valide, sinon un message d'avertissement indiquant les colonnes manquantes.","code":""}]
