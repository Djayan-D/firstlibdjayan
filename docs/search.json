[{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Générer un rapport d'analyses","text":"Dans cette vignette, nous allons explorer l’utilisation de plusieurs fonctions utiles qui permettent d’analyser et de générer des rapports à partir de données relatives aux communes et aux départements. Nous allons démontrer ces fonctions avec des exemples pratiques et des données fictives pour vous montrer leur efficacité et leur facilité d’utilisation. Les fonctions que nous allons aborder sont : summary.commune() : Cette fonction génère un résumé détaillé des informations relatives à une commune donnée. Elle permet de connaître des statistiques sur les élus de la commune, telles que leur âge moyen, la distribution des âges et l’élu le plus âgé, entre autres informations utiles pour une analyse locale. summary.departement() : De manière similaire à summary.commune(), cette fonction génère un résumé pour un département entier. Elle permet d’obtenir une vue d’ensemble des statistiques relatives à toutes les communes du département, y compris la répartition des âges des élus, le nombre de communes et le nombre total d’élus. generer_rapport() : Cette fonction plus avancée permet de générer un rapport au format PDF en utilisant un fichier Quarto. Elle prend en entrée les informations sur la commune et le département, et génère un rapport structuré contenant les analyses réalisées avec les deux premières fonctions. Nous allons démontrer l’utilisation de ces fonctions à travers des exemples concrets, en travaillant avec des données fictives et en générant un rapport complet pour une commune et un département spécifiques.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"résumé-des-informations-dune-commune","dir":"Articles","previous_headings":"","what":"1. Résumé des informations d’une commune","title":"Générer un rapport d'analyses","text":"La fonction summary.commune() permet de générer un résumé des informations pour une commune donnée. Elle prend en entrée un objet de type commune (un data.frame contenant les informations des élus d’une commune) et génère un résumé incluant : Le nom de la commune Le nombre d’élus La distribution des âges des élus L’élu le plus âgé","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"exemple-dutilisation-de-summary-commune","dir":"Articles","previous_headings":"1. Résumé des informations d’une commune","what":"Exemple d’utilisation de summary.commune","title":"Générer un rapport d'analyses","text":"","code":"# Création d'un data.frame pour la commune de Gotham City  commune_data <- data.frame(   Code.du.département = rep(23, 10),   Libellé.du.département = rep(\"Creuse\", 10),   Code.de.la.commune = rep(23666, 10),   Libellé.de.la.commune = rep(\"Gotham City\", 10),   Nom.de.l.élu = c(\"EINSTEIN\", \"POTTER\", \"MUSK\", \"MONROE\", \"HOLMES\",                     \"BONAPARTE\", \"MACRON\", \"ZINEDINE\", \"WAYNE\", \"WILLIAMS\"),   Prénom.de.l.élu = c(\"Albert\", \"Harry\", \"Elon\", \"Marilyn\", \"Sherlock\",                        \"Napoléon\", \"Emmanuel\", \"Zidane\", \"Bruce\", \"Serena\"),   Date.de.naissance = as.Date(c(\"14/03/1879\", \"31/07/1980\", \"28/06/1971\",                                 \"01/06/1926\", \"06/01/1854\", \"15/08/1769\",                                  \"04/09/1981\", \"06/07/1907\", \"19/02/1911\",                                 \"26/09/1981\"),                               format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2310, 321, 372, 2330, 321,                                                   3110, 3530, 4120, 456, 4120),   Libellé.de.la.fonction = c(\"\", \"Maire\", \"1er adjoint au Maire\", \"\", \"\", \"\",                               \"\", \"2e adjoint au Maire\", \"3e adjoint au Maire\",                               \"\") )   # Attribuer la classe commune  commune_data <- creer_commune(commune_data)   # Résumé de la commune  summary(commune_data) #> $nom_commune #> [1] \"Gotham City\" #>  #> $nombre_elus #> [1] 10 #>  #> $distribution_ages_elus #> $distribution_ages_elus$Q0 #> [1] 43.4274 #>  #> $distribution_ages_elus$Q25 #> [1] 46.85616 #>  #> $distribution_ages_elus$Q50 #> [1] 106.3877 #>  #> $distribution_ages_elus$Q75 #> [1] 138.8863 #>  #> $distribution_ages_elus$Q100 #> [1] 255.5425 #>  #>  #> $elu_plus_age #> $elu_plus_age$nom #> [1] \"BONAPARTE\" #>  #> $elu_plus_age$prénom #> [1] \"Napoléon\" #>  #> $elu_plus_age$age #> [1] 255"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"résumé-pour-la-commune-de-gotham-city","dir":"Articles","previous_headings":"1. Résumé des informations d’une commune","what":"Résumé pour la commune de Gotham City","title":"Générer un rapport d'analyses","text":"Le résumé des informations pour la commune de Gotham City est généré dynamiquement et peut évoluer en fonction de la date d’exécution. Voici les principaux résultats : Nom de la commune : Gotham City Nombre d’élus : 10 Âge minimum (Q0) : 43 ans Premier quartile (Q25) : 46,25 ans Médiane (Q50) : 106 ans Troisième quartile (Q75) : 138 ans Âge maximum (Q100) : 255 ans L’élu le plus âgé : Napoléon Bonaparte, 255 ans (au moment de l’exécution) L’âge des élus est calculé en fonction de la date d’exécution du programme, ce qui signifie que les valeurs évolueront naturellement avec le temps. Cependant, la liste des élus et leurs fonctions restent fixes (à moins qu’un coup d’État ne survienne à Gotham…).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"résumé-des-informations-dun-département","dir":"Articles","previous_headings":"","what":"2. Résumé des informations d’un département","title":"Générer un rapport d'analyses","text":"La fonction summary.departement() permet de générer un résumé des informations pour un département donné. Elle prend en entrée un objet de type departement (un data.frame contenant les informations des communes et des élus d’un département) et génère un résumé incluant : Le nom du département Le nombre de communes Le nombre total d’élus La distribution des âges des élus L’élu le plus âgé La commune avec la moyenne d’âge la plus basse La commune avec la moyenne d’âge la plus élevée","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"exemple-dutilisation-de-summary-departement","dir":"Articles","previous_headings":"2. Résumé des informations d’un département","what":"Exemple d’utilisation de summary.departement()","title":"Générer un rapport d'analyses","text":"","code":"# Création d'un data.frame pour le département de Mordor  departement_data <- data.frame(   Code.du.département = rep(99, 10),   Libellé.du.département = rep(\"Mordor\", 10),   Code.de.la.commune = c(rep(99901,2), rep(99902,3), rep(99903,5)),   Libellé.de.la.commune = c(rep(\"Metropolis\",2), rep(\"Hogwarts\",3), rep(\"Wakanda\",5)),   Nom.de.l.élu = c(\"DICAPRIO\", \"CHURCHILL\", \"LE GRIS\", \"JORDAN\", \"SARTRE\",                     \"MESSI\", \"PAN\", \"BOND\", \"DE GAULLE\", \"CHANEL\"),   Prénom.de.l.élu = c(\"Leonardo\", \"Winston\", \"Gandalf\", \"Michael\", \"Jean-Paul\",                        \"Lionel\", \"Peter\", \"James\", \"Charles\", \"Coco\"),   Date.de.naissance = as.Date(c(\"11/11/1974\", \"30/11/1874\", \"01/01/1000\", \"17/02/1963\",                                 \"21/06/1905\", \"24/06/1987\", \"10/12/1990\", \"13/04/1962\",                                 \"22/11/1890\", \"19/08/1883\"),                               format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2, 1, 7, 3, 7, 2, 7, 7, 1, 2),   Libellé.de.la.fonction = c(\"Maire\", \"1er adjoint au Maire\", \"\", \"2e adjoint au Maire\",                              \"\", \"\", \"\", \"3e adjoint au Maire\", \"\", \"\") )   # Attribuer la classe \"departement\"  departement_data <- creer_departement(departement_data)   # Résumé du département  summary(departement_data) #> $nom_departement #> [1] \"Mordor\" #>  #> $nombre_communes #> [1] 3 #>  #> $nombre_elus #> [1] 10 #>  #> $distribution_age_elus #> $distribution_age_elus$Q0 #> [1] 34.22192 #>  #> $distribution_age_elus$Q25 #> [1] 53.23425 #>  #> $distribution_age_elus$Q50 #> [1] 91.28767 #>  #> $distribution_age_elus$Q75 #> [1] 139.7164 #>  #> $distribution_age_elus$Q100 #> [1] 1025.162 #>  #>  #> $elu_plus_age #> $elu_plus_age$nom #> [1] \"LE GRIS\" #>  #> $elu_plus_age$age #> [1] 1025 #>  #>  #> $elu_plus_jeune #> $elu_plus_jeune$nom #> [1] \"PAN\" #>  #> $elu_plus_jeune$age #> [1] 34 #>  #>  #> $commune_plus_jeune #> $commune_plus_jeune$nom #> [1] \"Wakanda\" #>  #> $commune_plus_jeune$distribution_ages #> $commune_plus_jeune$distribution_ages$Q0 #> [1] 34.22192 #>  #> $commune_plus_jeune$distribution_ages$Q25 #> [1] 37.68493 #>  #> $commune_plus_jeune$distribution_ages$Q50 #> [1] 62.88219 #>  #> $commune_plus_jeune$distribution_ages$Q75 #> [1] 134.2712 #>  #> $commune_plus_jeune$distribution_ages$Q100 #> [1] 141.5315 #>  #>  #>  #> $commune_plus_agee #> $commune_plus_agee$nom #> [1] \"Hogwarts\" #>  #> $commune_plus_agee$distribution_ages #> $commune_plus_agee$distribution_ages$Q0 #> [1] 62.03288 #>  #> $commune_plus_agee$distribution_ages$Q25 #> [1] 90.86301 #>  #> $commune_plus_agee$distribution_ages$Q50 #> [1] 119.6932 #>  #> $commune_plus_agee$distribution_ages$Q75 #> [1] 572.4274 #>  #> $commune_plus_agee$distribution_ages$Q100 #> [1] 1025.162"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"résumé-pour-le-département-de-mordor","dir":"Articles","previous_headings":"2. Résumé des informations d’un département","what":"Résumé pour le département de Mordor","title":"Générer un rapport d'analyses","text":"Le résumé des informations pour le département de Mordor est généré dynamiquement et peut évoluer en fonction de la date d’exécution. Voici les principaux résultats : Nom du département : Mordor Nombre de communes : 3 Nombre d’élus : 10 Âge minimum (Q0) : 34 ans Premier quartile (Q25) : 53 ans Médiane (Q50) : 90,5 ans Troisième quartile (Q75) : 139,25 ans Âge maximum (Q100) : 1025 ans L’élu le plus âgé : LE GRIS, 1025 ans L’élu le plus jeune : PAN, 34 ans Âge minimum (Q0) : 34 ans Premier quartile (Q25) : 37 ans Médiane (Q50) : 62 ans Troisième quartile (Q75) : 134 ans Âge maximum (Q100) : 141 ans Âge minimum (Q0) : 62 ans Premier quartile (Q25) : 90,5 ans Médiane (Q50) : 119 ans Troisième quartile (Q75) : 572 ans Âge maximum (Q100) : 1025 ans Les âges des élus sont calculés en fonction de la date d’exécution du programme, ce qui signifie que les valeurs évolueront naturellement avec le temps. Cependant, la liste des élus et leurs fonctions restent fixes (à moins qu’un incident ne survienne dans le Mordor…).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"générer-un-rapport-danalyses","dir":"Articles","previous_headings":"","what":"3. Générer un rapport d’analyses","title":"Générer un rapport d'analyses","text":"La fonction generer_rapport() permet de générer un rapport au format HTML en utilisant un fichier Quarto .qmd. Elle prend en entrée les codes de la commune et du département, ainsi qu’un data.frame contenant les données à utiliser. Si aucun data.frame n’est précisé, celui par défaut sera utilisé.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"exemple-dutilisation-de-generer_rapport","dir":"Articles","previous_headings":"3. Générer un rapport d’analyses","what":"Exemple d’utilisation de generer_rapport","title":"Générer un rapport d'analyses","text":"Cette fonction crée un fichier html appelé rapport_nantes_et_loire_atlantique.html qui inclut des analyses sur la commune de Nantes et le département de Loire-Atlantique. Les données peuvent être ajustées pour correspondre à des valeurs réelles provenant de vos jeux de données.","code":"# Exemple d'utilisation de generer_rapport  # Supposons que nous voulons générer un rapport pour Gotham City (commune) et Mordor (département)  # Utilisation du df de base generer_rapport(commune = 44109,                  departement = 44,                  output = \"rapport_Nantes_Loire_Atlantique.html\")  departement_data <- data.frame(   Code.du.département = rep(99, 10),   Libellé.du.département = rep(\"Mordor\", 10),   Code.de.la.commune = c(rep(99901,2), rep(99902,3), rep(99903,5)),   Libellé.de.la.commune = c(rep(\"Metropolis\",2), rep(\"Hogwarts\",3), rep(\"Wakanda\",5)),   Nom.de.l.élu = c(\"DICAPRIO\", \"CHURCHILL\", \"LE GRIS\", \"JORDAN\", \"SARTRE\",                    \"MESSI\", \"PAN\", \"BOND\", \"DE GAULLE\", \"CHANEL\"),   Prénom.de.l.élu = c(\"Leonardo\", \"Winston\", \"Gandalf\", \"Michael\", \"Jean-Paul\",                       \"Lionel\", \"Peter\", \"James\", \"Charles\", \"Coco\"),   Date.de.naissance = as.Date(c(\"11/11/1974\", \"30/11/1874\", \"01/01/1000\", \"17/02/1963\",                                 \"21/06/1905\", \"24/06/1987\", \"10/12/1990\", \"13/04/1962\",                                 \"22/11/1890\", \"19/08/1883\"),                               format = \"%d/%m/%Y\"),   Code.de.la.catégorie.socio.professionnelle = c(2, 1, 7, 3, 7, 2, 7, 7, 1, 2),   Libellé.de.la.fonction = c(\"Maire\", \"1er adjoint au Maire\", \"\", \"2e adjoint au Maire\",                              \"\", \"\", \"\", \"3e adjoint au Maire\", \"\", \"\") )  # Si un data.frame spécifique est souhaité, on peut le préciser generer_rapport(commune = 99901,                 departement = 99,                 df = departement_data,                 output = \"rapport_gotham_city_mordor_df_specifie.html\")"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Generer_un_rapport_d_analyses.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Générer un rapport d'analyses","text":"Nous avons montré comment utiliser les fonctions summary.commune(), summary.departement(), et generer_rapport() pour générer des rapports d’analyses détaillés. Ces fonctions peuvent être adaptées à d’autres communes et départements pour créer des rapports personnalisés.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Structure_des_DataFrames_pour_l_analyse.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Structure des DataFrames pour l'analyse des élus","text":"Cette vignette décrit la structure requise des DataFrames utilisés dans les fonctions d’analyse des élus. Elle détaille les colonnes obligatoires, les formats attendus et présente elus_sample, un exemple de données inclus dans le package.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Structure_des_DataFrames_pour_l_analyse.html","id":"structure-minimale-requise","dir":"Articles","previous_headings":"Introduction","what":"Structure minimale requise","title":"Structure des DataFrames pour l'analyse des élus","text":"Pour fonctionner correctement, certaines fonctions du package nécessitent un DataFrame contenant au minimum les colonnes suivantes : Si ces colonnes sont absentes, certaines fonctions renverront une erreur explicative. D’autres pourront s’exécuter partiellement, mais avec des limitations.","code":"schema <- c(   \"Code.du.département\",   \"Libellé.du.département\",   \"Code.de.la.commune\",   \"Libellé.de.la.commune\",   \"Nom.de.l.élu\",   \"Prénom.de.l.élu\",   \"Date.de.naissance\",   \"Code.de.la.catégorie.socio.professionnelle\",   \"Libellé.de.la.fonction\" )"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Structure_des_DataFrames_pour_l_analyse.html","id":"format-des-colonnes","dir":"Articles","previous_headings":"Introduction","what":"Format des colonnes","title":"Structure des DataFrames pour l'analyse des élus","text":"Code.du.département (integer ou character) : Code numérique du département. Libellé.du.département (character) : Nom complet du département. Code.de.la.commune (integer ou character) : Code INSEE de la commune. Libellé.de.la.commune (character) : Nom complet de la commune. Nom.de.l.élu (character) : Nom de famille de l’élu. Prénom.de.l.élu (character) : Prénom de l’élu. Date.de.naissance (Date) : Date de naissance de l’élu (au format YYYY-MM-DD). Code.de.la.catégorie.socio.professionnelle (integer) : Code représentant la catégorie socio-professionnelle. Libellé.de.la.fonction (character) : Fonction de l’élu dans la commune. Si une colonne date est en format character, il est recommandé de la convertir avec :","code":"df$Date.de.naissance <- as.Date(df$Date.de.naissance, format = \"%Y-%m-%d\")"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Structure_des_DataFrames_pour_l_analyse.html","id":"exemple-de-création-dun-dataframe-minimal","dir":"Articles","previous_headings":"Introduction","what":"Exemple de création d’un DataFrame minimal","title":"Structure des DataFrames pour l'analyse des élus","text":"Voici un exemple de DataFrame respectant le schéma minimal :","code":"elus_test <- data.frame(   Code.du.département = c(1, 2, 3),   Libellé.du.département = c(\"Département A\", \"Département B\", \"Département C\"),   Code.de.la.commune = c(101, 202, 303),   Libellé.de.la.commune = c(\"Commune A\", \"Commune B\", \"Commune C\"),   Nom.de.l.élu = c(\"DUPONT\", \"MARTIN\", \"BERTRAND\"),   Prénom.de.l.élu = c(\"Jean\", \"Marie\", \"Luc\"),   Date.de.naissance = as.Date(c(\"1980-05-14\", \"1975-09-23\", \"1990-11-30\")),   Code.de.la.catégorie.socio.professionnelle = c(321, 654, 987),   Libellé.de.la.fonction = c(\"Maire\", \"1er adjoint au Maire\", \"\") )"},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Structure_des_DataFrames_pour_l_analyse.html","id":"elus_sample-exemple-de-données-du-package","dir":"Articles","previous_headings":"Introduction","what":"elus_sample : Exemple de données du package","title":"Structure des DataFrames pour l'analyse des élus","text":"Le package inclut un jeu de données réel, elus_sample, contenant des informations plus détaillées. Voici sa structure : Comme peut le voir, elus_sample contient toutes les colonnes requises ainsi que d’autres informations supplémentaires.","code":"names(elus_sample) #>  [1] \"Code.du.département\"                             #>  [2] \"Libellé.du.département\"                          #>  [3] \"Code.de.la.collectivité.à.statut.particulier\"    #>  [4] \"Libellé.de.la.collectivité.à.statut.particulier\" #>  [5] \"Code.de.la.commune\"                              #>  [6] \"Libellé.de.la.commune\"                           #>  [7] \"Nom.de.l.élu\"                                    #>  [8] \"Prénom.de.l.élu\"                                 #>  [9] \"Code.sexe\"                                       #> [10] \"Date.de.naissance\"                               #> [11] \"Code.de.la.catégorie.socio.professionnelle\"      #> [12] \"Libellé.de.la.catégorie.socio.professionnelle\"   #> [13] \"Date.de.début.du.mandat\"                         #> [14] \"Libellé.de.la.fonction\"                          #> [15] \"Date.de.début.de.la.fonction\"                    #> [16] \"Code.nationalité\""},{"path":"https://djayan-d.github.io/firstlibdjayan/articles/Structure_des_DataFrames_pour_l_analyse.html","id":"conclusion","dir":"Articles","previous_headings":"Introduction","what":"Conclusion","title":"Structure des DataFrames pour l'analyse des élus","text":"Pour utiliser pleinement les fonctions du package, il est recommandé d’utiliser au minimum la structure définie dans schema. elus_sample est un exemple de jeu de données plus complet, intégrant d’autres variables qui peuvent enrichir les analyses. Certaines fonctions peuvent fonctionner sans la structure minimale, mais d’autres exigeront impérativement certaines colonnes. En cas d’erreur, un message explicite vous aidera à ajuster vos données pour garantir une exécution correcte des analyses.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Djayan Daëron. Author, maintainer.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Daëron D (2025). firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales. R package version 0.1.0, https://djayan-d.github.io/firstlibdjayan.","code":"@Manual{,   title = {firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales},   author = {Djayan Daëron},   year = {2025},   note = {R package version 0.1.0},   url = {https://djayan-d.github.io/firstlibdjayan}, }"},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"bienvenue-sur-firstlibdjayan","dir":"","previous_headings":"","what":"Analyse et Visualisation des Données Communales et Départementales","title":"Analyse et Visualisation des Données Communales et Départementales","text":"Bienvenue dans la documentation de FirstLibDjayan, un package R qui facilite l’analyse des données des élus au niveau des communes et départements.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"objectifs-du-package","dir":"","previous_headings":"","what":"Objectifs du package","title":"Analyse et Visualisation des Données Communales et Départementales","text":"Le package FirstLibDjayan pour objectif de faciliter l’analyse des données des élus au niveau local. Voici les principales fonctionnalités :","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"fonctionnalités-clés-","dir":"","previous_headings":"Objectifs du package","what":"Fonctionnalités clés :","title":"Analyse et Visualisation des Données Communales et Départementales","text":"Analyse des élus : Extraction et comptage des élus uniques, identification des adjoints, analyse de la distribution des âges pour mieux comprendre la composition des collectivités. Synthèse des communes et départements : Résumé détaillé des élus par territoire, identification des doyens et benjamins, étude des écarts d’âges par commune et département. Visualisation des tendances : Génération de graphiques interactifs pour observer la répartition des élus par code professionnel, avec des filtres adaptés aux communes et départements. Génération de rapports automatisés : Production de rapports personnalisés en Quarto, permettant d’obtenir rapidement une synthèse claire des données pour chaque territoire.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyse et Visualisation des Données Communales et Départementales","text":"Pour installer FirstLibDjayan, utilisez la commande suivante dans R :","code":"devtools::install_github(\"djayan-d/firstlibdjayan\")"},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"id_-exemple-dutilisation","dir":"","previous_headings":"","what":"📖 Exemple d’utilisation","title":"Analyse et Visualisation des Données Communales et Départementales","text":"Voici un exemple pour illustrer comment utiliser FirstLibDjayan dans votre analyse :","code":"library(firstlibdjayan)  summary.commune(data)"},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"id_-fonctionnalités-principales","dir":"","previous_headings":"","what":"💡 Fonctionnalités principales","title":"Analyse et Visualisation des Données Communales et Départementales","text":"summary.commune() : Résumé détaillé des informations relatives à une commune donnée (âge moyen, répartition des âges, etc.). summary.departement() : Résumé des informations relatives à un département entier, incluant les communes, la répartition des âges des élus et d’autres statistiques. generer_rapport() : Génère des rapports au format PDF ou HTML avec des analyses complètes basées sur les communes et départements.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"id_-contribuer","dir":"","previous_headings":"","what":"👥 Contribuer","title":"Analyse et Visualisation des Données Communales et Départementales","text":"Si vous souhaitez contribuer à ce package, n’hésitez pas à ouvrir une issue ou à proposer une pull request sur GitHub.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"id_️-auteurs","dir":"","previous_headings":"","what":"✍️ Auteurs","title":"Analyse et Visualisation des Données Communales et Départementales","text":"DAËRON Djayan (daeron.djayan@gmail.com)","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/index.html","id":"id_-licence","dir":"","previous_headings":"","what":"📄 Licence","title":"Analyse et Visualisation des Données Communales et Départementales","text":"Ce projet est sous licence MIT - voir le fichier LICENSE pour plus de détails. Note : Si vous avez des questions ou rencontrez des problèmes, n’hésitez pas à ouvrir une issue sur GitHub.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculer la distribution des âges des élus — calcul_distribution_age","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"Cette fonction permet de calculer la distribution des âges des élus à partir de leur date de naissance. Elle retourne les quantiles (0","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"","code":"calcul_distribution_age(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"df Un `data.frame` contenant les données des élus, avec la colonne `Date.de.naissance` utilisée pour calculer l'âge de chaque élu.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/calcul_distribution_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculer la distribution des âges des élus — calcul_distribution_age","text":"Une liste contenant les quantiles des âges des élus : - `Q0` : 0 - `Q25` : 25 - `Q50` : 50 - `Q75` : 75 - `Q100` : 100","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"Cette fonction permet de compter le nombre de lignes dans un `data.frame` où la fonction de l'élu contient le mot \"adjoint\". Elle utilise la fonction `validate_schema` pour vérifier que le `data.frame` respecte la structure minimale.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"","code":"compter_nombre_d_adjoints(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"df Un `data.frame` contenant les données des élus. Il doit inclure la colonne `Libellé.de.la.fonction` qui sera utilisée pour rechercher le terme \"adjoint\".","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_adjoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'adjoints dans un DataFrame — compter_nombre_d_adjoints","text":"Un entier représentant le nombre d'adjoints dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":null,"dir":"Reference","previous_headings":"","what":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"Cette fonction permet de compter le nombre d'élus uniques dans un `data.frame` en fonction de leur nom, prénom et date de naissance. Elle élimine les doublons pour ne compter qu'une seule fois chaque élu, même s'il apparaît plusieurs fois dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"","code":"compter_nombre_d_elus(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"df Un `data.frame` contenant les données des élus, avec les colonnes `Nom.de.l.élu`, `Prénom.de.l.élu` et `Date.de.naissance` utilisées pour déterminer l'unicité de chaque élu.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/compter_nombre_d_elus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compter le nombre d'élus dans un DataFrame — compter_nombre_d_elus","text":"Un entier représentant le nombre d'élus uniques dans le `data.frame`.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Créer un objet de classe commune — creer_commune","title":"Créer un objet de classe commune — creer_commune","text":"Cette fonction vérifie si le data.frame contient les données d'une seule commune. Si plusieurs communes sont détectées, elle arrête l'exécution avec un message d'erreur. Sinon, elle ajoute la classe commune au data.frame.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Créer un objet de classe commune — creer_commune","text":"","code":"creer_commune"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Créer un objet de classe commune — creer_commune","text":"object class function length 1.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Créer un objet de classe commune — creer_commune","text":"df Un data.frame contenant les données des communes, avec la colonne Code.de.la.commune utilisée pour vérifier si plusieurs communes sont présentes.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Créer un objet de classe commune — creer_commune","text":"Un data.frame auquel la classe commune est ajoutée s'il contient une seule commune.","code":""},{"path":[]},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Créer un objet de classe commune — creer_commune","text":"","code":"# Exemple de données pour une commune  df_commune <- data.frame(Code.de.la.commune = c(44109,44109)) df_commune <- creer_commune(df_commune) #> Warning: ⚠️ Attention : Certaines colonnes essentielles sont absentes : Code.du.département, Libellé.du.département, Libellé.de.la.commune, Nom.de.l.élu, Prénom.de.l.élu, Date.de.naissance, Code.de.la.catégorie.socio.professionnelle, Libellé.de.la.fonction #> Cela peut entraîner des erreurs dans certaines fonctions du package. #> ✅ Classe 'commune' ajoutée au DataFrame. class(df_commune)  # Doit afficher \"commune\" comme classe ajoutée #> [1] \"commune\"    \"data.frame\""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Créer un objet de classe departement — creer_departement","title":"Créer un objet de classe departement — creer_departement","text":"Cette fonction vérifie si le data.frame contient les données d'un seul département. Si plusieurs départements sont détectés, elle arrête l'exécution avec un message d'erreur. Sinon, elle ajoute la classe departement au data.frame.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Créer un objet de classe departement — creer_departement","text":"","code":"creer_departement"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Créer un objet de classe departement — creer_departement","text":"object class function length 1.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Créer un objet de classe departement — creer_departement","text":"df Un data.frame contenant les données des départements, avec la colonne Code.du.département utilisée pour vérifier si plusieurs départements sont présents.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/creer_departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Créer un objet de classe departement — creer_departement","text":"Un data.frame auquel la classe departement est ajoutée s'il contient un seul département.","code":""},{"path":[]},{"path":[]},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Données des élus — elus_sample","title":"Données des élus — elus_sample","text":"Un jeu de données contenant des informations sur les élus des départements Loire-Atlantique, Gers ainsi que de la commune de Faverelles dans le Loiret.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Données des élus — elus_sample","text":"","code":"elus_sample"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Données des élus — elus_sample","text":"Un data.frame avec 9 752 lignes et 16 colonnes : Code.du.département Code unique du département (ex : 44 pour Loire-Atlantique, 32 pour Gers). Libellé.du.département Nom du département (ex : \"Loire-Atlantique\", \"Gers\", \"Loiret\"). Code.de.la.collectivité.à.statut.particulier Code identifiant une collectivité spéciale. Libellé.de.la.collectivité.à.statut.particulier Nom de la collectivité spéciale. Code.de.la.commune Code unique de la commune (ex : 44000 pour Nantes, 32000 pour Auch...). Libellé.de.la.commune Nom de la commune (ex : \"Nantes\", \"Auch\", \"Faverelles\"). Nom.de.l.élu Nom de l’élu. Prénom.de.l.élu Prénom de l’élu. Code.sexe Sexe de l’élu (M = masculin, F = féminin). Date.de.naissance Date de naissance (au format \"Caractère\", à mettre en \"Date\"). Code.de.la.catégorie.socio.professionnelle Code socio-professionnel. Libellé.de.la.catégorie.socio.professionnelle Libellé de la catégorie socio-professionnelle. Date.de.début.du.mandat Début du mandat (au format \"Caractère\", à mettre en \"Date\"). Libellé.de.la.fonction Fonction exercée (ex : maire, conseiller municipal...). Date.de.début.de.la.fonction Début de la fonction (au format \"Caractère\", à mettre en \"Date\"). Code.nationalité Code nationalité de l’élu.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Données des élus — elus_sample","text":"📂 Trouver les données sur data.gouv.fr","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/elus_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Données des élus — elus_sample","text":"","code":"data(elus_sample) head(elus_sample) #>   Code.du.département Libellé.du.département #> 1                  32                   Gers #> 2                  32                   Gers #> 3                  32                   Gers #> 4                  32                   Gers #> 5                  32                   Gers #> 6                  32                   Gers #>   Code.de.la.collectivité.à.statut.particulier #> 1                                           NA #> 2                                           NA #> 3                                           NA #> 4                                           NA #> 5                                           NA #> 6                                           NA #>   Libellé.de.la.collectivité.à.statut.particulier Code.de.la.commune #> 1                                              NA              32001 #> 2                                              NA              32001 #> 3                                              NA              32001 #> 4                                              NA              32001 #> 5                                              NA              32001 #> 6                                              NA              32001 #>   Libellé.de.la.commune Nom.de.l.élu Prénom.de.l.élu Code.sexe #> 1                Aignan     AURENSAN          Michel         M #> 2                Aignan    BARATAULT        Philippe         M #> 3                Aignan     BARNADAS         Mathieu         M #> 4                Aignan       CALLAC    Marie-Pierre         F #> 5                Aignan       CHANUT          Michel         M #> 6                Aignan         DALY       Geraldine         F #>   Date.de.naissance Code.de.la.catégorie.socio.professionnelle #> 1        09/07/1952                                         75 #> 2        08/12/1957                                         33 #> 3        07/06/1981                                         52 #> 4        16/11/1966                                         34 #> 5        14/09/1959                                         12 #> 6        27/01/1973                                         85 #>                                       Libellé.de.la.catégorie.socio.professionnelle #> 1                                                 Ancienne profession intermédiaire #> 2                                                     Cadre de la fonction publique #> 3                         Employé civil et agent de service de la fonction publique #> 4                                               Professeur, profession scientifique #> 5                                              Agriculteur sur moyenne exploitation #> 6 Personne diverse sans activité professionnelle de moins de 60 ans (sauf retraité) #>   Date.de.début.du.mandat Libellé.de.la.fonction Date.de.début.de.la.fonction #> 1              28/06/2020                                                     #> 2              28/06/2020                                                     #> 3              28/06/2020                                                     #> 4              28/06/2020  3ème adjoint au Maire                   03/07/2020 #> 5              28/06/2020                                                     #> 6              28/06/2020                                                     #>   Code.nationalité #> 1               FR #> 2               FR #> 3               FR #> 4               FR #> 5               FR #> 6               IE"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/firstlibdjayan.html","id":null,"dir":"Reference","previous_headings":"","what":"firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales — firstlibdjayan","title":"firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales — firstlibdjayan","text":"Ce package fournit des fonctions pour manipuler les données relatives aux élus des communes et départements français. Il inclut des outils pour calculer des statistiques, générer des graphiques et structurer les données en classes commune et departement.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/firstlibdjayan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales — firstlibdjayan","text":"Ce package permet l'analyse et la visualisation des données relatives aux élus des communes et départements français. Il inclut des outils pour calculer des statistiques, générer des graphiques et structurer les données en classes commune et departement.","code":""},{"path":[]},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/firstlibdjayan.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"firstlibdjayan: Analyse et Visualisation des Données Communales et Départementales — firstlibdjayan","text":"Daëron Djayan [aut, cre] daeron.djayan@gmail.com","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":null,"dir":"Reference","previous_headings":"","what":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"Cette fonction permet de générer un rapport au format HTML ou PDF à partir d'un fichier Quarto (.qmd). Elle utilise les informations d'une commune et d'un département fournis en paramètres, ainsi qu'un dataframe optionnel contenant des données pour enrichir le rapport.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"","code":"generer_rapport(commune, departement, output, df = elus_sample)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"commune Un entier ou une chaîne de caractères représentant le code INSEE de la commune concernée. departement Un entier ou une chaîne de caractères représentant le code INSEE du département concerné. output Une chaîne de caractères spécifiant le chemin et le nom du fichier de sortie. Le format du fichier doit être précisé en ajoutant \".html\" ou \".pdf\" à la fin (par exemple, \"rapport_nantes.html\" ou \"rapport_nantes.pdf\"). df (optionnel) Un dataframe contenant les données nécessaires pour générer le rapport. Par défaut, la fonction utilise elus_sample, qui est inclus dans le package.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"Aucun. La fonction génère un fichier de rapport au format HTML ou PDF dans le chemin spécifié par output.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"Si le dataframe utilisé est elus_sample ou qu'aucun n'est précisé,   les codes commune et département doivent correspondre à ceux présents dans elus_sample. Si un autre dataframe est utilisé, il doit respecter une structure minimale   pour garantir le bon fonctionnement de la fonction. Voir les warnings en cas   d'incompatibilité ou consulter la documentation   sur la page d'aide de création de DataFrame. La fonction utilise quarto::quarto_render() pour générer le rapport au format spécifié. Le format conseillé est le format PDF du fait des images.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/generer_rapport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Générer un rapport à partir d'un fichier Quarto — generer_rapport","text":"","code":"# Générer un rapport pour Nantes (44109) et la Loire-Atlantique (44) en HTML generer_rapport(44109, 44, \"rapport_Nantes_et_Loire_Atlantique.html\") #>   #>   #> processing file: rapport.qmd  #> 1/17                    #> 2/17 [unnamed-chunk-1]  #> 3/17                    #> 4/17 [unnamed-chunk-2]  #> 5/17                    #> 6/17 [unnamed-chunk-3]  #> 7/17                    #> 8/17 [unnamed-chunk-4]  #> 9/17                    #> 10/17 [unnamed-chunk-5]  #> 11/17                    #> 12/17 [unnamed-chunk-6]  #> 13/17                    #> 14/17 [unnamed-chunk-7]  #> 15/17                    #> 16/17 [unnamed-chunk-8]  #> 17/17                    #> output file: rapport.knit.md  #>   #> pandoc --output ..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\Desktop\\firstlibdjayan\\docs\\reference\\rapport_Nantes_et_Loire_Atlantique.html #>   to: html #>   standalone: true #>   section-divs: true #>   html-math-method: mathjax #>   wrap: none #>   default-image-extension: png #>    #> metadata #>   document-css: false #>   link-citations: true #>   date-format: long #>   lang: en #>   title: Rapport #>   author: Djayan DAËRON #>    #> Output created: ..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\Desktop\\firstlibdjayan\\docs\\reference\\rapport_Nantes_et_Loire_Atlantique.html #>  #>  #> ✅ rapport_Nantes_et_Loire_Atlantique.html a été généré avec succès.  # Générer un rapport pour Nantes en PDF generer_rapport(44109, 44, \"rapport_Nantes_et_Loire_Atlantique.pdf\") #>   #>   #> processing file: rapport.qmd  #> 1/17                    #> 2/17 [unnamed-chunk-1]  #> 3/17                    #> 4/17 [unnamed-chunk-2]  #> 5/17                    #> 6/17 [unnamed-chunk-3]  #> 7/17                    #> 8/17 [unnamed-chunk-4]  #> 9/17                    #> 10/17 [unnamed-chunk-5]  #> 11/17                    #> 12/17 [unnamed-chunk-6]  #>   #> Sorry, but pdfcrop.exe did not succeed.  #>   #> The log file hopefully contains the information to get MiKTeX going again:  #>   #>   C:\\Users\\Djayan\\AppData\\Local\\MiKTeX\\miktex\\log\\pdfcrop.log  #> 13/17                    #> 14/17 [unnamed-chunk-7]  #> 15/17                    #> 16/17 [unnamed-chunk-8]  #>   #> Sorry, but pdfcrop.exe did not succeed.  #>   #> The log file hopefully contains the information to get MiKTeX going again:  #>   #>   C:\\Users\\Djayan\\AppData\\Local\\MiKTeX\\miktex\\log\\pdfcrop.log  #> 17/17                    #> output file: rapport.knit.md  #>   #> pandoc --output rapport.tex #>   to: latex #>   standalone: true #>   pdf-engine: xelatex #>   variables: #>     graphics: true #>     tables: true #>   default-image-extension: pdf #>    #> metadata #>   documentclass: scrartcl #>   classoption: #>     - DIV=11 #>     - numbers=noendperiod #>   papersize: letter #>   header-includes: #>     - \\KOMAoption{captions}{tableheading} #>   block-headings: true #>   title: Rapport #>   author: Djayan DAËRON #>    #>  #> Rendering PDF #> running xelatex - 1 #>   This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) #>    restricted \\write18 enabled. #>   entering extended mode #>    #> running xelatex - 2 #>   This is XeTeX, Version 3.141592653-2.6-0.999996 (TeX Live 2024) (preloaded format=xelatex) #>    restricted \\write18 enabled. #>   entering extended mode #>    #>  #> Output created: ..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\Desktop\\firstlibdjayan\\docs\\reference\\rapport_Nantes_et_Loire_Atlantique.pdf #>  #>  #> ✅ rapport_Nantes_et_Loire_Atlantique.pdf a été généré avec succès.  # Voir la documentation pour la structure attendue du dataframe # https://djayan-d.github.io/firstlibdjayan/"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphique des codes professionnels des élus d'une commune — plot.commune","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"Cette fonction génère un graphique en barres horizontales représentant le nombre d'élus par code professionnel dans une commune. Le graphique affiche les codes professionnels ayant au moins un élu, triés par nombre décroissant d'élus. Un titre et des étiquettes sont ajoutés pour la lisibilité.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"","code":"# S3 method for class 'commune' plot(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"df Un objet de classe commune (un data.frame contenant les informations des élus de la commune).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"Un objet de type ggplot représentant un graphique en barres horizontales, où l'axe des ordonnées correspond aux codes professionnels   et l'axe des abscisses au nombre d'élus. Le graphique inclut également des étiquettes des valeurs et un titre personnalisé.","code":""},{"path":[]},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphique des codes professionnels des élus d'une commune — plot.commune","text":"","code":"# Créer un exemple de jeu de données pour Nantes (code 44109) df_commune <- data.frame(   Code.de.la.commune = rep(44109, 10),   Libellé.de.la.commune = rep(\"Nantes\", 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Code.de.la.catégorie.socio.professionnelle = c(1, 2, 2, 3, 1, 3, 4, 1, 2, 3),   stringsAsFactors = FALSE ) df_commune <- creer_commune(df_commune)  # Ajouter la classe \"commune\" #> Warning: ⚠️ Attention : Certaines colonnes essentielles sont absentes : Code.du.département, Nom.de.l.élu, Prénom.de.l.élu, Date.de.naissance, Libellé.de.la.fonction #> Cela peut entraîner des erreurs dans certaines fonctions du package. #> ✅ Classe 'commune' ajoutée au DataFrame.  # Appeler la fonction pour générer le graphique plot(df_commune) #> Warning: ⚠️ Attention : Certaines colonnes essentielles sont absentes : Code.du.département, Nom.de.l.élu, Prénom.de.l.élu, Date.de.naissance, Libellé.de.la.fonction #> Cela peut entraîner des erreurs dans certaines fonctions du package."},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphique des codes professionnels des élus d'un département — plot.departement","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"Cette fonction génère un graphique en barres horizontales représentant les 10 codes professionnels les plus représentés parmi les élus d'un département. Le graphique affiche les codes professionnels ayant au moins un élu, triés par nombre décroissant d'élus. Le titre du graphique et l'axe des abscisses sont personnalisés en fonction du nom du département et du nombre de communes.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"","code":"# S3 method for class 'departement' plot(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"df Un objet de classe departement (un dataframe contenant les informations des élus du département).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"Un objet de type ggplot représentant un graphique en barres horizontales, où l'axe des ordonnées correspond aux codes professionnels   et l'axe des abscisses au nombre d'élus. Le graphique inclut également des étiquettes des valeurs et un titre personnalisé.","code":""},{"path":[]},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot.departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graphique des codes professionnels des élus d'un département — plot.departement","text":"","code":"# Créer un exemple de jeu de données pour le département de Loire-Atlantique (code 44) df_departement <- data.frame(   Code.du.département = rep(44, 10),   Libellé.du.département = rep(\"Loire-Atlantique\", 10),   Libellé.de.la.commune = c(\"Nantes\", \"Saint-Nazaire\", \"La Baule\", \"Guérande\", \"Rezé\", \"Sautron\", \"Châteaubriant\", \"Clisson\", \"Pornic\", \"Ancenis\"),   Code.de.la.catégorie.socio.professionnelle = c(1, 2, 3, 4, 1, 3, 2, 4, 1, 2),   stringsAsFactors = FALSE ) df_departement <- creer_departement(df_departement)  # Ajouter la classe \"departement\" #> Warning: ⚠️ Attention : Certaines colonnes essentielles sont absentes : Code.de.la.commune, Nom.de.l.élu, Prénom.de.l.élu, Date.de.naissance, Libellé.de.la.fonction #> Cela peut entraîner des erreurs dans certaines fonctions du package. #> ✅ Classe 'departement' ajoutée au DataFrame.  # Appeler la fonction pour générer le graphique plot.departement(df_departement) #> Error in plot.departement(df_departement): could not find function \"plot.departement\""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":null,"dir":"Reference","previous_headings":"","what":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"Cette fonction permet de générer un graphique en barres horizontal représentant le nombre d'élus par code professionnel. Elle compte le nombre d'élus par code professionnel, filtre ceux avec zéro élu et affiche les résultats sous forme de graphique.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"","code":"plot_code_professions(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"df Un `data.frame` contenant les données des élus, avec la colonne `Code.de.la.catégorie.socio.professionnelle` utilisée pour déterminer la répartition des élus par code professionnel.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/plot_code_professions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Générer un graphique du nombre d'élus par code professionnel — plot_code_professions","text":"Un objet `ggplot` représentant un graphique en barres horizontal du nombre d'élus par code professionnel.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Introduction","title":null,"text":"Ce rapport présente l’analyse des données des élus au niveau d’une commune et d’un département. L’objectif est d’explorer et de visualiser les données liées aux élus afin de mieux comprendre leur répartition géographique et démographique. En fonction des paramètres fournis, ce rapport génère des résumés statistiques ainsi que des graphiques pour chaque entité (commune et département).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Installation et chargement de la bibliothèque firstlibdjayan","title":null,"text":"Avant de commencer l’analyse, il est nécessaire de charger le package nécessaire à la manipulation des données, il se nomme firstlibdjayan. Cette bibliothèque est développée spécifiquement pour faciliter l’analyse des données des élus, qu’il s’agisse de communes ou de départements. En l’installant depuis GitHub, nous nous assurons d’utiliser la dernière version disponible, et elle nous permet d’accéder à des fonctions dédiées à cette analyse.","code":"remotes::install_github(\"Djayan-D/firstlibdjayan\", quiet = TRUE) library(firstlibdjayan)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Chargement des données","title":null,"text":"Dans cette section, les données sont chargées en fonction du paramètre dataframe_name. Si le paramètre spécifie le nom du fichier de données, il sera directement utilisé. Si le nom du fichier est différent, le fichier est chargé à partir du chemin spécifié par dataframe_path. Une fois chargées, les données sont prêtes à être manipulées et analysées selon les critères de la commune et du département définis.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Chargement des données","title":null,"text":"","code":"# Charger le fichier temporaire si ce n'est pas \"elus_sample\"  if (params$dataframe_name == \"elus_sample\") {   data <- elus_sample  # Utilise directement elus_sample      data$Date.de.naissance <- as.Date(data$Date.de.naissance, format = \"%d/%m/%Y\") } else {   # Charge le fichier sauvegardé en utilisant le chemin passé en paramètre   data <- readRDS(normalizePath(params$dataframe_path, mustWork = TRUE)) }"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtrage des données par commune et département","title":null,"text":"Avant d’analyser les données, il est important de filtrer les informations en fonction de la commune et du département spécifiés. Cela nous permet de focaliser l’analyse sur les élus de la commune et du département de notre choix, en utilisant les codes des entités. Ce filtrage assure que l’analyse se concentre uniquement sur les données pertinentes pour l’entité géographique choisie.","code":"df_commune <- data |>    dplyr::filter(Code.de.la.commune == params$code_commune)  df_departement <- data |>    dplyr::filter(Code.du.département == params$code_departement)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Création des jeux de données pour la commune et le département","title":null,"text":"Une fois les données filtrées, nous utilisons les fonctions creer_commune et creer_departement pour structurer les jeux de données. Ces fonctions permettent de créer des objets spécifiques à chaque entité géographique, ce qui facilite leur manipulation et analyse. Ce processus garantit que les données sont au bon format pour les analyses suivantes.","code":"df_commune <- creer_commune(df_commune) ✅ Classe 'commune' ajoutée au DataFrame. df_departement <- creer_departement(df_departement) ✅ Classe 'departement' ajoutée au DataFrame."},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse des données","title":null,"text":"L’étape finale de ce rapport consiste à analyser les données des élus. Des résumés statistiques sont générés pour la commune et le département, afin de fournir une vue d’ensemble des caractéristiques démographiques des élus. En outre, des graphiques sont produits pour visualiser ces données, ce qui permet une compréhension plus intuitive des informations clés sur les élus dans la commune et le département. La première étape consiste à obtenir un résumé des données pour la commune. Ce résumé nous fournit des informations sur le nombre total d’élus, la distribution des âges, les caractéristiques démographiques, ainsi que des détails supplémentaires concernant les élus de cette commune spécifique. Ensuite, nous produisons un graphique montrant la répartition des élus par profession. Cela permet de visualiser les différentes catégories professionnelles des élus dans la commune et d’analyser la diversité professionnelle au sein de la municipalité.  Pour le département, nous générons également un résumé statistique similaire à celui de la commune mais un peu plus complet, afin de fournir des informations sur les élus à l’échelle départementale. Cela comprend des données démographiques détaillées et un aperçu des caractéristiques des élus dans le département. Enfin, un graphique est produit pour le département, illustrant la répartition des élus par profession. Cette analyse permet de comparer la diversité professionnelle des élus à l’échelle départementale et d’examiner les tendances possibles entre la commune et le département.","code":"summary(df_commune) $nom_commune [1] \"Nantes\"  $nombre_elus [1] 66  $distribution_ages_elus $distribution_ages_elus$Q0 [1] 28.18904  $distribution_ages_elus$Q25 [1] 43.10205  $distribution_ages_elus$Q50 [1] 51.03425  $distribution_ages_elus$Q75 [1] 58.61849  $distribution_ages_elus$Q100 [1] 73.00274   $elu_plus_age $elu_plus_age$nom [1] \"PROCHASSON\"  $elu_plus_age$prénom [1] \"François\"  $elu_plus_age$age [1] 73 plot(df_commune) summary(df_commune) $nom_commune [1] \"Nantes\"  $nombre_elus [1] 66  $distribution_ages_elus $distribution_ages_elus$Q0 [1] 28.18904  $distribution_ages_elus$Q25 [1] 43.10205  $distribution_ages_elus$Q50 [1] 51.03425  $distribution_ages_elus$Q75 [1] 58.61849  $distribution_ages_elus$Q100 [1] 73.00274   $elu_plus_age $elu_plus_age$nom [1] \"PROCHASSON\"  $elu_plus_age$prénom [1] \"François\"  $elu_plus_age$age [1] 73 plot(df_commune)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Commune","title":null,"text":"La première étape consiste à obtenir un résumé des données pour la commune. Ce résumé nous fournit des informations sur le nombre total d’élus, la distribution des âges, les caractéristiques démographiques, ainsi que des détails supplémentaires concernant les élus de cette commune spécifique. Ensuite, nous produisons un graphique montrant la répartition des élus par profession. Cela permet de visualiser les différentes catégories professionnelles des élus dans la commune et d’analyser la diversité professionnelle au sein de la municipalité.","code":"summary(df_commune) $nom_commune [1] \"Nantes\"  $nombre_elus [1] 66  $distribution_ages_elus $distribution_ages_elus$Q0 [1] 28.18904  $distribution_ages_elus$Q25 [1] 43.10205  $distribution_ages_elus$Q50 [1] 51.03425  $distribution_ages_elus$Q75 [1] 58.61849  $distribution_ages_elus$Q100 [1] 73.00274   $elu_plus_age $elu_plus_age$nom [1] \"PROCHASSON\"  $elu_plus_age$prénom [1] \"François\"  $elu_plus_age$age [1] 73 plot(df_commune)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistiques","title":null,"text":"La première étape consiste à obtenir un résumé des données pour la commune. Ce résumé nous fournit des informations sur le nombre total d’élus, la distribution des âges, les caractéristiques démographiques, ainsi que des détails supplémentaires concernant les élus de cette commune spécifique.","code":"summary(df_commune) $nom_commune [1] \"Nantes\"  $nombre_elus [1] 66  $distribution_ages_elus $distribution_ages_elus$Q0 [1] 28.18904  $distribution_ages_elus$Q25 [1] 43.10205  $distribution_ages_elus$Q50 [1] 51.03425  $distribution_ages_elus$Q75 [1] 58.61849  $distribution_ages_elus$Q100 [1] 73.00274   $elu_plus_age $elu_plus_age$nom [1] \"PROCHASSON\"  $elu_plus_age$prénom [1] \"François\"  $elu_plus_age$age [1] 73"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Répartition des élus par profession","title":null,"text":"Ensuite, nous produisons un graphique montrant la répartition des élus par profession. Cela permet de visualiser les différentes catégories professionnelles des élus dans la commune et d’analyser la diversité professionnelle au sein de la municipalité.","code":"plot(df_commune)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Département","title":null,"text":"Pour le département, nous générons également un résumé statistique similaire à celui de la commune mais un peu plus complet, afin de fournir des informations sur les élus à l’échelle départementale. Cela comprend des données démographiques détaillées et un aperçu des caractéristiques des élus dans le département. Enfin, un graphique est produit pour le département, illustrant la répartition des élus par profession. Cette analyse permet de comparer la diversité professionnelle des élus à l’échelle départementale et d’examiner les tendances possibles entre la commune et le département.","code":"summary(df_commune) $nom_commune [1] \"Nantes\"  $nombre_elus [1] 66  $distribution_ages_elus $distribution_ages_elus$Q0 [1] 28.18904  $distribution_ages_elus$Q25 [1] 43.10205  $distribution_ages_elus$Q50 [1] 51.03425  $distribution_ages_elus$Q75 [1] 58.61849  $distribution_ages_elus$Q100 [1] 73.00274   $elu_plus_age $elu_plus_age$nom [1] \"PROCHASSON\"  $elu_plus_age$prénom [1] \"François\"  $elu_plus_age$age [1] 73 plot(df_commune)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Statistiques","title":null,"text":"Pour le département, nous générons également un résumé statistique similaire à celui de la commune mais un peu plus complet, afin de fournir des informations sur les élus à l’échelle départementale. Cela comprend des données démographiques détaillées et un aperçu des caractéristiques des élus dans le département.","code":"summary(df_commune) $nom_commune [1] \"Nantes\"  $nombre_elus [1] 66  $distribution_ages_elus $distribution_ages_elus$Q0 [1] 28.18904  $distribution_ages_elus$Q25 [1] 43.10205  $distribution_ages_elus$Q50 [1] 51.03425  $distribution_ages_elus$Q75 [1] 58.61849  $distribution_ages_elus$Q100 [1] 73.00274   $elu_plus_age $elu_plus_age$nom [1] \"PROCHASSON\"  $elu_plus_age$prénom [1] \"François\"  $elu_plus_age$age [1] 73"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Répartition des élus par profession","title":null,"text":"Enfin, un graphique est produit pour le département, illustrant la répartition des élus par profession. Cette analyse permet de comparer la diversité professionnelle des élus à l’échelle départementale et d’examiner les tendances possibles entre la commune et le département.","code":"plot(df_commune)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/rapport_Nantes_et_Loire_Atlantique.html","id":null,"dir":"Reference","previous_headings":"","what":"Conclusion","title":null,"text":"En conclusion, ce rapport offre une analyse détaillée des données des élus au niveau de la commune et du département. Grâce aux résumés statistiques et aux graphiques générés, il est possible d’obtenir une vue d’ensemble des caractéristiques démographiques des élus, comme l’âge, la profession et d’autres facteurs clés. Ce rapport peut être facilement généré de manière comparable pour toutes les communes et tous les départements, ce qui permet une comparaison efficace entre différentes entités locales. De plus, il est possible d’ajouter des éléments personnalisés dans les analyses, selon les besoins spécifiques. Cela ouvre la voie à des comparaisons encore plus fines et adaptées à des critères particuliers, offrant ainsi une flexibilité maximale pour explorer diverses dimensions des données des élus. Cette approche permet non seulement d’identifier des tendances à l’échelle locale, mais aussi de comparer des collectivités aux caractéristiques différentes, contribuant ainsi à une meilleure prise de décision politique et à l’amélioration de la gestion publique.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Résumé des informations d'une commune — summary.commune","title":"Résumé des informations d'une commune — summary.commune","text":"Cette fonction génère un résumé des informations pour une commune donnée. Elle vérifie que l'objet passé en argument est bien de la classe commune, puis retourne une liste contenant le nom de la commune et des statistiques sur celle-ci, notamment le nombre d'élus, la distribution des âges des élus, ainsi que des informations sur l'élu le plus âgés.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Résumé des informations d'une commune — summary.commune","text":"","code":"# S3 method for class 'commune' summary(x)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Résumé des informations d'une commune — summary.commune","text":"x Un objet de classe commune, qui est un data.frame contenant les données des élus d'une commune.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Résumé des informations d'une commune — summary.commune","text":"Une liste contenant : nom_commune : Le nom de la commune nombre_elus : Le nombre d'élus dans la commune distribution_ages_elus : Les quantiles de la distribution des âges des élus elu_plus_age : Les informations de l'élu le plus âgé","code":""},{"path":[]},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Résumé des informations d'une commune — summary.commune","text":"","code":"# Créer un exemple de jeu de données pour Nantes (code 44109) df_nantes <- data.frame(   Code.de.la.commune = rep(44109, 5),   Libellé.de.la.commune = rep(\"Nantes\", 5),   Nom.de.l.élu = c(\"Dupont\", \"Dupuis\", \"Martin\", \"Lemoine\", \"Durand\"),   Prénom.de.l.élu = c(\"Jean\", \"Marie\", \"Paul\", \"Anne\", \"Pierre\"),   Date.de.naissance = as.Date(c(\"1970-01-01\", \"1980-05-12\", \"1965-08-22\", \"1992-10-30\", \"1950-12-05\")),   stringsAsFactors = FALSE ) df_nantes <- creer_commune(df_nantes)  # Ajouter la classe \"commune\" #> Warning: ⚠️ Attention : Certaines colonnes essentielles sont absentes : Code.du.département, Libellé.du.département, Code.de.la.catégorie.socio.professionnelle, Libellé.de.la.fonction #> Cela peut entraîner des erreurs dans certaines fonctions du package. #> ✅ Classe 'commune' ajoutée au DataFrame.  # Appeler la fonction pour obtenir un résumé des informations de la commune de Nantes summary(df_nantes) #> Warning: ⚠️ Attention : Certaines colonnes essentielles sont absentes : Code.du.département, Libellé.du.département, Code.de.la.catégorie.socio.professionnelle, Libellé.de.la.fonction #> Cela peut entraîner des erreurs dans certaines fonctions du package. #> $nom_commune #> [1] \"Nantes\" #>  #> $nombre_elus #> [1] 5 #>  #> $distribution_ages_elus #> $distribution_ages_elus$Q0 #> [1] 32.33425 #>  #> $distribution_ages_elus$Q25 #> [1] 44.80274 #>  #> $distribution_ages_elus$Q50 #> [1] 55.16164 #>  #> $distribution_ages_elus$Q75 #> [1] 59.52329 #>  #> $distribution_ages_elus$Q100 #> [1] 74.23562 #>  #>  #> $elu_plus_age #> $elu_plus_age$nom #> [1] \"Durand\" #>  #> $elu_plus_age$prénom #> [1] \"Pierre\" #>  #> $elu_plus_age$age #> [1] 74 #>  #>"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":null,"dir":"Reference","previous_headings":"","what":"Résumé des informations d'un département — summary.departement","title":"Résumé des informations d'un département — summary.departement","text":"Cette fonction génère un résumé des informations pour un département donné. Elle vérifie que l'objet passé en argument est bien de la classe departement, puis retourne une liste contenant le nom du département et des statistiques sur celui-ci, notamment le nombre de communes, le nombre d'élus, la distribution des âges des élus, ainsi que des informations sur les élus les plus âgés et les plus jeunes, ainsi que les communes les plus jeunes et les plus âgées.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Résumé des informations d'un département — summary.departement","text":"","code":"# S3 method for class 'departement' summary(x)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Résumé des informations d'un département — summary.departement","text":"x Un objet de classe `departement` (un `data.frame` contenant les informations des élus et des communes).","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Résumé des informations d'un département — summary.departement","text":"Une liste contenant plusieurs éléments : nom_departement : Le nom du département nombre_communes : Le nombre de communes dans le département nombre_elus : Le nombre d'élus dans le département distribution_age_elus : La distribution des âges des élus dans le département elu_plus_age : Le nom et l'âge de l'élu le plus âgé elu_plus_jeune : Le nom et l'âge de l'élu le plus jeune commune_plus_jeune : La commune avec la moyenne d'âge la plus faible commune_plus_agee : La commune avec la moyenne d'âge la plus élevée","code":""},{"path":[]},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/summary.departement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Résumé des informations d'un département — summary.departement","text":"","code":"# Créer un exemple de jeu de données pour le département de Loire-Atlantique (code 44) df_loire_atlantique <- data.frame(   Code.de.la.commune = rep(44109, 5),   Libellé.de.la.commune = rep(\"Nantes\", 5),   Libellé.du.département = rep(\"Loire-Atlantique\", 5),   Nom.de.l.élu = c(\"Dupont\", \"Dupuis\", \"Martin\", \"Lemoine\", \"Durand\"),   Prénom.de.l.élu = c(\"Jean\", \"Marie\", \"Paul\", \"Anne\", \"Pierre\"),   Date.de.naissance = as.Date(c(\"1970-01-01\", \"1980-05-12\", \"1965-08-22\", \"1992-10-30\", \"1950-12-05\")),   Code.de.la.catégorie.socio.professionnelle = c(1, 2, 3, 4, 5),   stringsAsFactors = FALSE ) df_loire_atlantique <- creer_departement(df_loire_atlantique)  # Ajouter la classe \"departement\" #> Warning: ⚠️ Attention : Certaines colonnes essentielles sont absentes : Code.du.département, Libellé.de.la.fonction #> Cela peut entraîner des erreurs dans certaines fonctions du package. #> Error in creer_departement(df_loire_atlantique): \"Code.du.département\" %in% colnames(df) is not TRUE  # Appeler la fonction pour obtenir un résumé des informations du département de Loire-Atlantique summary.departement(df_loire_atlantique) #> Error in summary.departement(df_loire_atlantique): could not find function \"summary.departement\""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"Cette fonction permet d'identifier les communes ayant la moyenne d'âge la plus faible et la plus élevée parmi les élus. Elle calcule la moyenne d'âge pour chaque commune, puis retourne une liste contenant les informations suivantes pour les communes avec les âges les plus jeunes et les plus âgés : - Le nom de la commune, - La distribution des âges des élus.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"","code":"trouver_communes_extremes_age(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"df Un `data.frame` contenant les informations des élus, avec la colonne `Date.de.naissance` utilisée pour calculer la moyenne d'âge par commune.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_communes_extremes_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver les communes avec les âges extrêmes — trouver_communes_extremes_age","text":"Une liste contenant deux sous-listes : - `commune_plus_jeune` : La commune avec la moyenne d'âge la plus faible, incluant sa distribution d'âges, - `commune_plus_agee` : La commune avec la moyenne d'âge la plus élevée, incluant sa distribution d'âges.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"Cette fonction permet de trouver l'élu le plus âgé dans un `data.frame`. Elle trie les élus par date de naissance et sélectionne l'élu ayant la date de naissance la plus ancienne. L'âge de l'élu est ensuite calculé en années.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"","code":"trouver_l_elu_le_plus_age(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"df Un `data.frame` contenant les données des élus, avec les colonnes `Nom.de.l.élu`, `Prénom.de.l.élu` et `Date.de.naissance` nécessaires pour déterminer l'élu le plus âgé.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l'élu le plus âgé — trouver_l_elu_le_plus_age","text":"Une liste contenant les informations suivantes sur l'élu le plus âgé : - `nom` : Le nom de l'élu - `prénom` : Le prénom de l'élu - `age` : L'âge de l'élu en années","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":null,"dir":"Reference","previous_headings":"","what":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"Cette fonction permet d'extraire les informations de l'élu le plus jeune d'un `data.frame`. L'élu le plus jeune est identifié en fonction de sa date de naissance la plus récente. La fonction retourne un résumé des informations de cet élu, incluant son nom, prénom et son âge calculé en années.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"","code":"trouver_l_elu_le_plus_jeune(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"df Un `data.frame` contenant les informations des élus, avec la colonne `Date.de.naissance` utilisée pour identifier l'élu le plus jeune.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/trouver_l_elu_le_plus_jeune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trouver l'élu le plus jeune — trouver_l_elu_le_plus_jeune","text":"Une liste contenant : - `nom` : Le nom de l'élu le plus jeune, - `prénom` : Le prénom de l'élu le plus jeune, - `age` : L'âge de l'élu le plus jeune en années.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Vérifier le schéma des données — validate_schema","title":"Vérifier le schéma des données — validate_schema","text":"Cette fonction vérifie si une `data.frame` contient toutes les colonnes nécessaires au bon fonctionnement des fonctions du package. Si certaines colonnes sont manquantes, la fonction retourne un avertissement. L'avertissement est utilisé car toutes les fonctions du package ne nécessitent pas toutes les colonnes. Cela permet de continuer l'exécution des fonctions, même en cas de colonnes manquantes.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vérifier le schéma des données — validate_schema","text":"","code":"validate_schema(df)"},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vérifier le schéma des données — validate_schema","text":"df La `data.frame` à vérifier.","code":""},{"path":"https://djayan-d.github.io/firstlibdjayan/reference/validate_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vérifier le schéma des données — validate_schema","text":"NULL Si le schéma est valide, sinon un message d'avertissement indiquant les colonnes manquantes.","code":""}]
